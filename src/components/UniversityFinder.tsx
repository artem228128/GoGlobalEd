'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import Image from 'next/image';

// Format number utility
const formatNumber = (num: number) => {
  return num.toLocaleString('en-US');
};

// Types
type University = {
  id: string;
  name: string;
  originalName: string;
  country: string;
  city: string;
  costPerYear: number;
  programs: string[];
  campusImage: string;
  level: 'Bachelor' | 'Master' | 'Language';
  deadlines: string;
  requirements: string;
  scholarships: string;
  videoTourUrl?: string;
};

type Filters = {
  country: string;
  program: string;
  budget: number;
};

// Mock data
const COUNTRIES = [
  { code: 'US', name: '–°–®–ê', flag: 'üá∫üá∏' },
  { code: 'CA', name: '–ö–∞–Ω–∞–¥–∞', flag: 'üá®üá¶' },
  { code: 'DE', name: '–ù—ñ–º–µ—á—á–∏–Ω–∞', flag: 'üá©üá™' },
  { code: 'FR', name: '–§—Ä–∞–Ω—Ü—ñ—è', flag: 'üá´üá∑' },
  { code: 'GB', name: '–í–µ–ª–∏–∫–∞ –ë—Ä–∏—Ç–∞–Ω—ñ—è', flag: 'üá¨üáß' },
];

const PROGRAMS = [
  '–Ü–¢',
  '–ë—ñ–∑–Ω–µ—Å',
  '–Ü–Ω–∂–µ–Ω–µ—Ä—ñ—è',
  '–î–∏–∑–∞–π–Ω',
  '–ì—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ –Ω–∞—É–∫–∏',
  '–ú–µ–¥–∏—Ü–∏–Ω–∞',
  '–ü—Ä–∞–≤–æ',
  '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏',
];

const MOCK_UNIVERSITIES: University[] = [
  {
    id: '1',
    name: 'University of Toronto',
    originalName: 'University of Toronto',
    country: '–ö–∞–Ω–∞–¥–∞',
    city: '–¢–æ—Ä–æ–Ω—Ç–æ',
    costPerYear: 35000,
    programs: ['–Ü–¢', '–ë—ñ–∑–Ω–µ—Å', '–Ü–Ω–∂–µ–Ω–µ—Ä—ñ—è'],
    campusImage: 'https://dummyimage.com/800x400/4A90E2/ffffff&text=University+of+Toronto',
    level: 'Bachelor',
    deadlines: 'Fall 2024: January 15, 2024\nWinter 2025: September 1, 2024',
    requirements: '- IELTS 6.5 –∞–±–æ TOEFL 90\n- –ê—Ç–µ—Å—Ç–∞—Ç –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—é –æ—Å–≤—ñ—Ç—É\n- –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç\n- 2 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω—ñ –ª–∏—Å—Ç–∏',
    scholarships: 'Lester B. Pearson International Scholarship\nPresident\'s Scholars of Excellence\nUniversity of Toronto International Scholar Award',
    videoTourUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',
  },
  {
    id: '2',
    name: 'Technical University of Munich',
    originalName: 'Technische Universit√§t M√ºnchen',
    country: '–ù—ñ–º–µ—á—á–∏–Ω–∞',
    city: '–ú—é–Ω—Ö–µ–Ω',
    costPerYear: 3000,
    programs: ['–Ü–Ω–∂–µ–Ω–µ—Ä—ñ—è', '–Ü–¢'],
    campusImage: 'https://dummyimage.com/800x400/50E3C2/ffffff&text=TU+Munich',
    level: 'Master',
    deadlines: 'Winter Semester 2024: April 30, 2024\nSummer Semester 2025: November 30, 2024',
    requirements: '- TestDaF 4 –∞–±–æ DSH 2\n- –î–∏–ø–ª–æ–º –±–∞–∫–∞–ª–∞–≤—Ä–∞\n- –†–µ–∑—é–º–µ\n- –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç',
    scholarships: 'DAAD Scholarships\nBavarian Academic Center Scholarship\nDeutschlandstipendium',
  },
  {
    id: '3',
    name: 'University College London',
    originalName: 'University College London',
    country: '–í–µ–ª–∏–∫–∞ –ë—Ä–∏—Ç–∞–Ω—ñ—è',
    city: '–õ–æ–Ω–¥–æ–Ω',
    costPerYear: 45000,
    programs: ['–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ë—ñ–∑–Ω–µ—Å', '–ü—Ä–∞–≤–æ'],
    campusImage: 'https://dummyimage.com/800x400/BD10E0/ffffff&text=UCL',
    level: 'Bachelor',
    deadlines: 'Fall 2024: January 15, 2024',
    requirements: '- IELTS 7.0\n- A-levels –∞–±–æ –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç\n- –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç\n- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó',
    scholarships: 'UCL Global Excellence Scholarship\nUCL Undergraduate Bursary',
  },
  {
    id: '4',
    name: 'Sciences Po Paris',
    originalName: 'Institut d\'√©tudes politiques de Paris',
    country: '–§—Ä–∞–Ω—Ü—ñ—è',
    city: '–ü–∞—Ä–∏–∂',
    costPerYear: 15000,
    programs: ['–ü–æ–ª—ñ—Ç–æ–ª–æ–≥—ñ—è', '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏', '–ï–∫–æ–Ω–æ–º—ñ–∫–∞'],
    campusImage: 'https://dummyimage.com/800x400/FF9500/ffffff&text=Sciences+Po',
    level: 'Bachelor',
    deadlines: 'Fall 2024: February 1, 2024',
    requirements: '- DELF B2 –∞–±–æ TCF\n- –ê—Ç–µ—Å—Ç–∞—Ç\n- –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç\n- –Ü–Ω—Ç–µ—Ä–≤\'—é',
    scholarships: 'Emile Boutmy Scholarship\nEiffel Excellence Scholarship',
  },
];

const UniversityCard = ({ university, onViewDetails }: { university: University; onViewDetails: () => void }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -5 }}
      className="bg-white rounded-xl overflow-hidden shadow-lg transition-shadow hover:shadow-xl"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="relative h-48">
        <Image
          src={university.campusImage}
          alt={`${university.name} campus`}
          fill
          className="object-cover"
        />
        {isHovered && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center"
          >
            <button
              onClick={onViewDetails}
              className="bg-accent-blue text-white px-6 py-3 rounded-lg font-medium hover:bg-accent-blue/90 transition-colors"
            >
              –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–æ–≥—Ä–∞–º—É
            </button>
          </motion.div>
        )}
      </div>

      <div className="p-6">
        <h3 className="text-xl font-bold mb-1">{university.name}</h3>
        <p className="text-gray-600 text-sm mb-3">{university.originalName}</p>

        <div className="flex items-center mb-3">
          <span className="text-gray-600">
            {university.city}, {university.country}
          </span>
        </div>

        <div className="mb-4">
          <span className="text-accent-blue font-semibold">
            {formatNumber(university.costPerYear)}$ –≤ —Ä—ñ–∫
          </span>
        </div>

        <div className="flex flex-wrap gap-2">
          {university.programs.map((program) => (
            <span
              key={program}
              className="bg-accent-purple/10 text-accent-purple px-3 py-1 rounded-full text-sm"
            >
              {program}
            </span>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

const UniversityModal = ({ university, onClose }: { university: University; onClose: () => void }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      className="bg-white rounded-xl p-8 max-w-3xl w-full max-h-[90vh] overflow-y-auto relative"
    >
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
      >
        ‚úï
      </button>

      <div className="relative h-64 mb-6 rounded-lg overflow-hidden">
        <Image
          src={university.campusImage}
          alt={`${university.name} campus`}
          fill
          className="object-cover"
        />
      </div>

      <h2 className="text-3xl font-bold mb-2">{university.name}</h2>
      <p className="text-xl text-gray-600 mb-6">{university.originalName}</p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        <div>
          <h3 className="text-xl font-semibold mb-4">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
          <div className="space-y-3">
            <p>
              <span className="font-medium">–ú—ñ—Å—Ç–æ:</span> {university.city},{' '}
              {university.country}
            </p>
            <p>
              <span className="font-medium">–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è:</span>{' '}
              {formatNumber(university.costPerYear)}$ –≤ —Ä—ñ–∫
            </p>
            <p>
              <span className="font-medium">–†—ñ–≤–µ–Ω—å:</span> {university.level}
            </p>
          </div>
        </div>

        <div>
          <h3 className="text-xl font-semibold mb-4">–î–µ–¥–ª–∞–π–Ω–∏ –ø–æ–¥–∞—á—ñ</h3>
          <p className="whitespace-pre-line">{university.deadlines}</p>
        </div>
      </div>

      <div className="mb-8">
        <h3 className="text-xl font-semibold mb-4">–£–º–æ–≤–∏ –≤—Å—Ç—É–ø—É</h3>
        <p className="whitespace-pre-line">{university.requirements}</p>
      </div>

      <div className="mb-8">
        <h3 className="text-xl font-semibold mb-4">–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å—Ç–∏–ø–µ–Ω–¥—ñ–π</h3>
        <p className="whitespace-pre-line">{university.scholarships}</p>
      </div>

      {university.videoTourUrl && (
        <div className="mb-8">
          <h3 className="text-xl font-semibold mb-4">–í—ñ–¥–µ–æ-—Ç—É—Ä –∫–∞–º–ø—É—Å–æ–º</h3>
          <div className="relative aspect-video rounded-lg overflow-hidden">
            <iframe
              src={university.videoTourUrl}
              title="Campus Tour"
              className="absolute inset-0 w-full h-full"
              allowFullScreen
            />
          </div>
        </div>
      )}

      <div className="flex justify-center">
        <button
          onClick={() => {
            // Handle application submission
            console.log('Submit application for:', university.name);
          }}
          className="bg-accent-blue text-white px-8 py-4 rounded-lg font-medium hover:bg-accent-blue/90 transition-colors text-lg"
        >
          –•–æ—á—É –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É
        </button>
      </div>
    </motion.div>
  );
};

const UniversityFinderForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    country: '',
    contact: '',
  });

  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would typically send the data to your backend
    console.log('Form submitted:', formData);
    setIsSubmitted(true);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  if (isSubmitted) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center p-8 bg-white rounded-xl shadow-lg"
      >
        <h3 className="text-2xl font-bold text-accent-blue mb-4">
          –î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!
        </h3>
        <p className="text-gray-600">
          –ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥–±–æ—Ä—É
          –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–∞–≤—á–∞–Ω–Ω—è.
        </p>
      </motion.div>
    );
  }

  return (
    <motion.form
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white p-8 rounded-xl shadow-lg"
      onSubmit={handleSubmit}
    >
      <h3 className="text-2xl font-bold text-center mb-6">
        –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ –º–µ–Ω—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç
      </h3>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2" htmlFor="name">
            –Ü–º'—è
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            value={formData.name}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2" htmlFor="country">
            –ë–∞–∂–∞–Ω–∞ –∫—Ä–∞—ó–Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
          </label>
          <select
            id="country"
            name="country"
            required
            value={formData.country}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
          >
            <option value="">–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É</option>
            {COUNTRIES.map((country) => (
              <option key={country.code} value={country.name}>
                {country.flag} {country.name}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2" htmlFor="contact">
            –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
          </label>
          <input
            type="text"
            id="contact"
            name="contact"
            required
            value={formData.contact}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            placeholder="Email –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
          />
        </div>
      </div>

      <button
        type="submit"
        className="w-full mt-6 bg-accent-blue text-white py-3 rounded-lg font-medium hover:bg-accent-blue/90 transition-colors"
      >
        –ó–Ω–∞–π—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç
      </button>
    </motion.form>
  );
};

const UniversityFinder = () => {
  const [filters, setFilters] = useState<Filters>({
    country: '',
    program: '',
    budget: 50000,
  });

  const [selectedUniversity, setSelectedUniversity] = useState<University | null>(
    null
  );

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [showFinderForm, setShowFinderForm] = useState(false);

  // Filter handlers
  const handleCountryChange = (country: string) => {
    setFilters((prev) => ({ ...prev, country }));
  };

  const handleProgramChange = (program: string) => {
    setFilters((prev) => ({ ...prev, program }));
  };

  const handleBudgetChange = (budget: number) => {
    setFilters((prev) => ({ ...prev, budget }));
  };

  // Modal handlers
  const openModal = (university: University) => {
    setSelectedUniversity(university);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedUniversity(null);
  };

  // Filter universities based on selected filters
  const filteredUniversities = MOCK_UNIVERSITIES.filter((university) => {
    const matchesCountry =
      !filters.country || university.country === filters.country;
    const matchesProgram =
      !filters.program ||
      university.programs.some((prog) => prog === filters.program);
    const matchesBudget = university.costPerYear <= filters.budget;

    return matchesCountry && matchesProgram && matchesBudget;
  });

  return (
    <section className="py-16 px-4 md:px-8 bg-off-white">
      <div className="max-w-7xl mx-auto">
        <h2 className="text-4xl md:text-5xl font-bold text-center mb-4">
          –ó–Ω–∞–π–¥–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç, —â–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Å–∞–º–µ —Ç–æ–±—ñ
        </h2>
        <p className="text-xl text-center text-gray-600 mb-12">
          –û–±–µ—Ä–∏ –∫—Ä–∞—ó–Ω—É, –Ω–∞–ø—Ä—è–º —ñ –±—é–¥–∂–µ—Ç ‚Äî –º–∏ –ø–æ–∫–∞–∂–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –∫–∞–º–ø—É—Å–∏.
        </p>

        <div className="flex justify-center mb-8">
          <button
            onClick={() => setShowFinderForm(!showFinderForm)}
            className="bg-accent-purple text-white px-6 py-3 rounded-lg font-medium hover:bg-accent-purple/90 transition-colors"
          >
            üéì –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ –º–µ–Ω—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç
          </button>
        </div>

        {showFinderForm ? (
          <div className="max-w-md mx-auto mb-12">
            <UniversityFinderForm />
          </div>
        ) : (
          <>
            {/* Filters */}
            <div className="flex flex-col md:flex-row gap-6 mb-12">
              {/* Country filter */}
              <div className="flex-1">
                <label className="block text-sm font-medium mb-2">–ö—Ä–∞—ó–Ω–∞</label>
                <select
                  className="w-full p-3 border rounded-lg bg-white"
                  value={filters.country}
                  onChange={(e) => handleCountryChange(e.target.value)}
                >
                  <option value="">–í—Å—ñ –∫—Ä–∞—ó–Ω–∏</option>
                  {COUNTRIES.map((country) => (
                    <option key={country.code} value={country.name}>
                      {country.flag} {country.name}
                    </option>
                  ))}
                </select>
              </div>

              {/* Program filter */}
              <div className="flex-1">
                <label className="block text-sm font-medium mb-2">–ù–∞–ø—Ä—è–º</label>
                <select
                  className="w-full p-3 border rounded-lg bg-white"
                  value={filters.program}
                  onChange={(e) => handleProgramChange(e.target.value)}
                >
                  <option value="">–í—Å—ñ –Ω–∞–ø—Ä—è–º–∏</option>
                  {PROGRAMS.map((program) => (
                    <option key={program} value={program}>
                      {program}
                    </option>
                  ))}
                </select>
              </div>

              {/* Budget filter */}
              <div className="flex-1">
                <label className="block text-sm font-medium mb-2">
                  –ë—é–¥–∂–µ—Ç (–¥–æ {formatNumber(filters.budget)}$ –≤ —Ä—ñ–∫)
                </label>
                <input
                  type="range"
                  min="3000"
                  max="50000"
                  step="1000"
                  value={filters.budget}
                  onChange={(e) => handleBudgetChange(Number(e.target.value))}
                  className="w-full h-2 bg-accent-blue rounded-lg appearance-none cursor-pointer"
                />
              </div>
            </div>

            {/* University Cards Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {filteredUniversities.map((university) => (
                <UniversityCard
                  key={university.id}
                  university={university}
                  onViewDetails={() => openModal(university)}
                />
              ))}
            </div>
          </>
        )}

        {/* Modal */}
        {isModalOpen && selectedUniversity && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <UniversityModal
              university={selectedUniversity}
              onClose={closeModal}
            />
          </div>
        )}
      </div>
    </section>
  );
};

export default UniversityFinder; 